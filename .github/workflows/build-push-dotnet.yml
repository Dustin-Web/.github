name: ' üë∑‚Äç‚ôÇÔ∏è Build and push dotnet'

on:
  workflow_call:
        inputs:
          service_name:
            description: 'Name of the service to deploy'
            type: string
            required: true
          owner:
            required: true
            type: string
            description: "Caller github.repo.owner"
          repo:
            required: true
            type: string
            description: "Caller github.repo "
          sha:
            required: true
            type: string
            description: "Caller github.sha "
          branch: 
              required: true
              type: string
              description: "branch is github.ref from caller"
          run_number: 
              required: true  
              type: string
              description: "github.run_number from caller"       
          acr_registry:
              required: false
              type: string
              description: "Acr registry url"
              default: "acrweb.azurecr.io"   
        secrets:
          nuget_auth_token:
              required: true
              description: "Nuget packaging auth token"              
          acr_username:
              required: true
              description: "Acr registry username"
          acr_password:
              required: true  
              description: "Acr password for login to azure registry"
          token:
              required: true
              description: "PAT Secret token to use for updating repos"
  
# outputs:
#   releasetag: 
#      description: "Create release tag from date and build number"
#      value: ${{steps.vars.outputs.releasetag}}

jobs:
  build:
    name: 'üë∑‚Äç‚ôÇÔ∏è Build and push'
    runs-on: ubuntu-latest
    outputs:
      releasetag: ${{steps.vars.outputs.releasetag}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repo }}
          token: ${{ secrets.token }} # `GH_PAT` is a secret that contains your PAT
        # Setup som github variables 
      - name: Declare github repository variables
        id: vars
        shell: bash
        env:
          RELEASE_DATE: $(git show -s --format=%cd --date=format:%Y-%m-%d)
        run: |
          echo "##[set-output name=branch;]$(echo ${{ inputs.branch }}#refs/heads/)"
          echo "::set-output name=commit_date::$(git show -s --format=%cd --date=format:%Y-%m-%d)"
          echo "::set-output name=releasetag::$(echo release_$(git show -s --format=%cd --date=format:%Y-%m-%d)_${{ inputs.run_number }})"                

#      - name: "Bump version"
#        shell: bash
#        run: |
#          echo "Release tag: ${{steps.vars.outputs.releasetag}}"
#          git config user.email "$EMAIL"          
#          echo "Run email"
#          git config user.name "$GITHUB_ACTOR"
#          echo "Run username"
#          git remote set-url origin https://x-access-token:${{ secrets.token }}@github.com/${{ inputs.repo }}
#          echo "Run set remote"
#          git checkout "${GITHUB_REF:11}"
#          echo "Run github ref"
#          git tag ${{steps.vars.outputs.releasetag}}
#          echo "Run tag"

#      - name: Push changes
#        uses: ad-m/github-push-action@master
#        with:
#          github_token: ${{ secrets.token }}
#          tags: true
          # branch: ${{ github.ref }}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ inputs.acr_registry  }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ inputs.acr_registry }}
          username: ${{ secrets.acr_username }}
          password: ${{ secrets.acr_password }}

      - name: Install .NET 7 SDK
        uses: actions/setup-dotnet@v3.0.3
        with:
            dotnet-version: 7.0.x
      - name: create nuget file with secrets
        run: |
         dotnet nuget update source "github" --username ${{ github.repository_owner }} --password "${{secrets.nuget_auth_token}} " --store-password-in-clear-text --configfile nuget.config
         cat nuget.config

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ inputs.acr_registry }}/${{ inputs.service_name }}:${{ steps.vars.outputs.releasetag }}, ${{ inputs.acr_registry }}/${{ inputs.service_name }}:latest
          build-args: CI_COMMIT_SHA=${{ steps.vars.outputs.sha_short }},RELEASE_TAG=${{ steps.vars.outputs.releasetag }},CI_COMMIT_MESSAGE=${{ github.event.head_commit.message }},CI_COMMIT_DATE=${{ steps.vars.outputs.commit_date }} 

  deploy:
      name: deploy test
      runs-on: ubuntu-latest
      needs: build
      environment: 
        name: test
        url: https://test.dustin.se.dustingroup.org/ 
      steps:
        - name: Deploy to test
          run: echo deploying test version ${{needs.build.outputs.releasetag}}
    deploy_stage:
      name: deploy stage
      runs-on: ubuntu-latest
      needs: build
      environment: 
        name: stage
        url: https://stage.dustin.se.dustingroup.org/ 
      steps:
        - name: Deploy to stage
          run: echo deploying stage version ${{needs.build.outputs.releasetag}}
    tagrelease:
      name: Tag for release
      runs-on: ubuntu-latest
      needs: build
      environment: 
        name: prod
        url: https://dustin.se/ 
      steps:
        - name: Tag repo production release
          run: echo tagging the release version ${{needs.build.outputs.releasetag}}
        - uses: actions/checkout@v3  
        - uses: rickstaa/action-create-tag@v1
          with:
            tag: ${{needs.build.outputs.releasetag}}
            message: "CI created release version ${{needs.build.outputs.releasetag}}"
  
        - name: Push changes
          uses: ad-m/github-push-action@master
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            tags: true